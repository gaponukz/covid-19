{"version":3,"sources":["components/navbar.js","components/menu.js","components/dropdown.js","components/content.js","components/table.js","components/canvas.js","components/countryCanvas.js","components/progress.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","this","props","children","Component","Menu","MenuItem","goTo","data-feather","CustomToggle","React","forwardRef","ref","onClick","event","preventDefault","CustomMenu","style","labeledBy","useState","value","setValue","aria-labelledby","FormControl","autoFocus","placeholder","onChange","target","Children","toArray","filter","child","toLowerCase","startsWith","CustomDropdown","state","error","countries","fetch","then","response","json","data","setState","Object","keys","message","Dropdown","Toggle","as","id","map","country","Item","Main","role","Header","MostInfectedTable","statistics","sortable_data","con","length","confirmed","rec","recovered","die","deaths","statistics_num","push","sort","a","b","ObjectSorted","forEach","item","slice","Table","Thead","Body","TableColumn","TableField","CountryCanvas","width","height","Canvas","Progress","window","location","pathname","substring","reverse","class","scope","date","App","exact","path","component","AllStatistics","Countrys","Country","useParams","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.293558cd.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\nexport default class Navbar extends Component {\n    render() {\n        return (\n            <>\n                <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n                    <a className=\"navbar-brand col-sm-3 col-md-2 mr-0\" href=\"/\">\n                        {this.props.children}\n                    </a>\n                </nav>\n            </>\n        )\n    }\n}","import React, {Component} from 'react'\n\nclass Menu extends Component {\n    render() {\n        return (\n            <div>\n                <nav className=\"col-md-2 d-none d-md-block bg-light sidebar\">\n                    <div className=\"sidebar-sticky\">\n                        <ul className=\"nav flex-column\">\n                            {this.props.children}\n                        </ul>\n                    </div>\n                </nav>\n            </div>\n        )\n    }\n}\n\nclass MenuItem extends Component {\n    render() {\n        return (\n            <div>\n                <li className=\"nav-item\">\n                    <a className=\"nav-link\" href={this.props.goTo ? `/${this.props.goTo}` : `/${this.props.children}`}>\n                        <span data-feather=\"file\"></span>\n                        {this.props.children}\n                    </a>\n                </li>\n            </div>\n        )\n    }\n}\n\nexport {\n    Menu,\n    MenuItem\n}","import React, {Component, useState} from 'react'\nimport { Dropdown, FormControl } from 'react-bootstrap'\n\nconst CustomToggle = React.forwardRef(({ children, onClick }, ref) => (\n    <a\n        href = {null}\n        ref = {ref}\n        onClick = {(event) => {\n            event.preventDefault()\n            onClick(event)\n        }}\n    >\n        { children } {   }\n        &#x25bc;\n    </a>\n))\n\nconst CustomMenu = React.forwardRef(\n    ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\n      const [value, setValue] = useState('')\n  \n      return (\n        <div\n          ref = {ref}\n          style = {style}\n          className = {className}\n          aria-labelledby = {labeledBy}\n        >\n          <FormControl\n            autoFocus\n            className = \"mx-3 my-2 w-auto\"\n            placeholder = \"Type to filter...\"\n            onChange = {(event) => setValue(event.target.value)}\n            value = {value}\n          />\n            <ul className=\"list-unstyled\">\n                {React.Children.toArray(children).filter(\n                    (child) =>\n                        !value || child.props.children.toLowerCase()\n                        .startsWith(value),\n                )}\n            </ul>\n        </div>\n      )\n    },\n)\n\nexport default class CustomDropdown extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            error: null, countries: []\n        }\n    }\n    componentDidMount() {\n        fetch(\"https://pomber.github.io/covid19/timeseries.json\")\n        .then(response => response.json())\n        .then(\n            data => { this.setState({ countries: Object.keys(data)})},\n            error => { this.setState({error})}\n        )\n    }\n    render() {\n        const {error, countries} = this.state\n        if (error) {return <div>{error.message}</div>}\n        return (\n            <>\n                <Dropdown>\n                    <Dropdown.Toggle as = {CustomToggle} id=\"dropdown-custom-components\">\n                        Countries \n                    </Dropdown.Toggle>\n\n                    <Dropdown.Menu as = {CustomMenu}>\n                        {countries.map(country => (\n                            <Dropdown.Item href = {country}>{country}</Dropdown.Item>\n                        ))}\n                    </Dropdown.Menu>\n                </Dropdown>\n            </>\n        )\n    }\n}","import React, {Component} from 'react'\n\nclass Main extends Component {\n    render() {\n        return (\n            <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 px-4\">\n                {this.props.children}\n            </main>\n        )\n    }\n}\n\nclass Header extends Component {\n    render() {\n        return (\n            <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n                <h1 className=\"h2\"> {this.props.children} </h1>\n            </div>\n        )\n    }\n}\n\nexport {\n    Main,\n    Header\n}","import React, {Component} from 'react'\n\nexport default class MostInfectedTable extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            error: null,\n            countries: [],\n            statistics: {}\n        }\n    }\n    componentDidMount() {\n        fetch(\"https://pomber.github.io/covid19/timeseries.json\")\n        .then(response => response.json())\n        .then( data => {\n            let sortable_data = []\n\n            for (let country in data) {\n                let con = data[country][data[country].length - 1].confirmed\n                let rec = data[country][data[country].length - 1].recovered\n                let die = data[country][data[country].length - 1].deaths\n                let statistics = [con, rec, die]\n                let statistics_num = con - rec - die\n                sortable_data.push([country, statistics, statistics_num])\n            }\n            sortable_data.sort((a, b) => {\n                return b[2] - a[2]\n            })\n        \n            let ObjectSorted = {}\n            sortable_data.forEach(item => {\n                ObjectSorted[item[0]] = item[1]\n            })\n            this.setState({\n                statistics: ObjectSorted,\n                countries: Object.keys(ObjectSorted).slice(0, 10)\n            })\n        },\n            error => { this.setState({error})}\n        )\n    }\n    render() {\n        const {error, countries, statistics} = this.state\n        if (error) {return <div>{error.message}</div>}\n        return (\n            <Table>\n                <Thead>\n                    <TableColumn>\n                        {['Country', 'Confirmed', 'Recovered', 'Deaths'].map(item => {\n                            return (\n                                <TableField> <h6> {item} </h6> </TableField>\n                            )\n                        })}\n                    </TableColumn>\n                </Thead>\n                <Body>\n                    {countries.map(country => {\n                        return (\n                        <TableColumn>\n                            <TableField> {country} </TableField>\n                            {[0, 1, 2].map(item => {\n                                return (\n                                    <TableField> {statistics[country][item]} </TableField>\n                                )\n                            })}\n                        </TableColumn>\n                        )\n                    })}\n                </Body>\n            </Table>\n        )\n    }\n}\n\nconst Table = props => {\n    return (\n        <div className=\"table-responsive\">\n            <table className=\"table table-striped table-sm\">\n                {props.children}\n            </table>\n        </div>\n    )\n}\n\nconst Thead = props => {\n    return (\n        <thead>\n            {props.children}\n        </thead>\n    )\n}\n\nconst Body = props => {\n    return (\n        <tbody>\n            {props.children}\n        </tbody>\n    )\n}\n\nconst TableColumn = props => {\n    return (\n        <tr>\n            {props.children}\n        </tr>\n    )\n}\n\nconst TableField = props => {\n    return (\n        <td>\n            {props.children}\n        </td>\n    )\n}","import React, {Component} from 'react'\n\nexport default class CountryCanvas extends Component { // 900 x 380\n    render() {\n        return (\n            <div> \n                <canvas className=\"my-4 w-100\" id={this.props.id} \n                width={this.props.width} height={this.props.height}></canvas>\n            </div>\n        )\n    }\n}","import React, {Component} from 'react'\n\nexport default class Canvas extends Component { // 900 x 380\n    render() {\n        return (\n            <div> \n                <canvas className=\"my-4 w-100\" id={this.props.id} \n                width={this.props.width} height={this.props.height}></canvas>\n            </div>\n        )\n    }\n}","import React, {Component} from 'react'\n\nexport default class Progress extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            error: null, \n            statistics: []\n        }\n    }\n    componentDidMount() {\n        fetch(\"https://pomber.github.io/covid19/timeseries.json\")\n        .then(response => response.json())\n        .then(\n            data => { \n                this.setState({\n                    statistics: data[window.location.pathname.substring(1)].reverse()\n                })\n            },\n            error => { this.setState({error})}\n        )\n    }\n    render() {\n        const {error, statistics} = this.state\n        if (error) {return <div>{error.message}</div>}\n        return(\n            <table class=\"table table-bordered\">\n                <thead>\n                    <tr>\n                        <th scope=\"col\">Date</th>\n                        <th scope=\"col\"> Confirmed </th>\n                        <th scope=\"col\"> Recovered </th>\n                        <th scope=\"col\"> Deaths </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {statistics.map(({ date, confirmed, recovered, deaths }) => {\n                        return (\n                            <tr>\n                                <td> {date} </td>\n                                <td> {confirmed} </td>\n                                <td> {recovered} </td>\n                                <td> {deaths} </td>\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </table>\n        )\n    }\n}","import { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport React, { Component } from 'react'\nimport {useParams} from \"react-router-dom\"\nimport Navbar from './components/navbar'\nimport {Menu, MenuItem} from './components/menu'\nimport CustomDropdown from './components/dropdown'\nimport {Main, Header} from './components/content'\nimport MostInfectedTable from './components/table'\nimport Canvas from './components/canvas'\nimport CountryCanvas from './components/countryCanvas'\nimport Progress from './components/progress'\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <Navbar> Covid-19 </Navbar> \n                <div className=\"container-fluid\">\n                    <div className=\"row\"> \n                        <Menu>\n                            <MenuItem goTo = \"/localhost:3000/\">\n                                All statistics\n                            </MenuItem>\n                            <MenuItem goTo = \"/\">\n                                <CustomDropdown/>\n                            </MenuItem>\n                            <MenuItem goTo = \"/github.com/pomber/covid19\">\n                                Covid-19 API\n                            </MenuItem>\n                            <MenuItem goTo = \"/https://www.instagram.com/__zhenyagaponyuk/\">\n                                Author\n                            </MenuItem>\n                        </Menu>\n\n                        <Main> \n                            <Router>\n                                <Switch>\n                                    <Route exact path = \"/\" component = {AllStatistics} />\n                                    <Route exact path = \"/:country\" component = {Countrys} />\n                                </Switch>\n                            </Router>\n                        </Main>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App\n\nclass AllStatistics extends Component {\n    render() {\n        return (\n            <div>\n                <Header> Statistics </Header>\n                <Canvas id = \"myChart\" width = {900} height = {380} />\n                <h2>Most infected</h2>\n                <MostInfectedTable/>\n            </div>\n        )\n    }\n}\n\nclass Countrys extends Component {\n    render() {\n        return (\n            <div>\n                <Header> \n                    Statistics in \n                    <Route path = \"/:country\" component={Country}/>\n                </Header>\n                <CountryCanvas id = \"countyCanvas\" width = {900} height = {380} />\n                <h2> Coronavirus progress </h2>\n                <Progress/>\n            </div>\n        )\n    }\n}\n\nconst Country = () => {\n    let { country } = useParams()\n    return <> {country} </>\n  }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}